/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
// #include <dt-bindings/zmk/mouse.h>

#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro
#define HM(k1, k2) &hm k1 k2     // Homerow Mods Macro

/ {
   behaviors {
      // td0: tap_dance_0 {
      //    compatible = "zmk,behavior-tap-dance";
      //    label = "TAP_DANCE_0";
      //    #binding-cells = <0>;
      //    tapping-term-ms = <200>;
      //    bindings = <&kp BACKSPACE>, <&kp DELETE>, <&kp ESC>;
      // };
      as: auto_shift {
         compatible = "zmk,behavior-hold-tap";
         label = "AUTO_SHIFT";
         #binding-cells = <2>;
         tapping_term_ms = <135>;
         quick_tap_ms = <0>;
         flavor = "tap-preferred";
         bindings = <&kp>, <&kp>;
      };
      bspc_del: backspace_delete {
         compatible = "zmk,behavior-mod-morph";
         label = "BACKSPACE_DELETE";
         #binding-cells = <0>;
         bindings = <&kp BACKSPACE>, <&kp DELETE>;
         mods = <(MOD_LSFT|MOD_RSFT)>;
         keep-mods = <(MOD_RSFT)>;
      };
      hm: homerow_mods {
         compatible = "zmk,behavior-hold-tap";
         label = "HOMEROW_MODS";
         #binding-cells = <2>;
         tapping-term-ms = <150>;
         quick-tap-ms = <0>;
         flavor = "tap-preferred";
         bindings = <&kp>, <&kp>;
      };
   };
   keymap {
      compatible = "zmk,keymap";
      default_layer {
         label = "Base";
         bindings = <
// -----------------------------------------------------------------------------------------
// |  --  |  Q  |  W  |  F  |  P  |  G  |   |  J  |  L   |  U      |  Y    |  ;     |  --  |
// |  --  |  A  |  R  |  S  |  T  |  D  |   |  H  |  N   |  E      |  I    |  O     |  --  |
// |  --  |  Z  |  X  |  C  |  V  |  B  |   |  K  |  M   |  ,      |  .    |  /     |  --  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
   &none  AS(Q) AS(W) AS(F) AS(P) AS(G)     AS(J) AS(L)  AS(U) AS(Y) AS(SEMI) &none
   &none  AS(A) HM(LCTRL, R) HM(LALT, S) HM(LGUI, T) AS(D)  AS(H) HM(RGUI, N) HM(RALT, E) HM(RCTRL, I) AS(O) &none
   &none  AS(Z) AS(X) AS(C) AS(V) AS(B)     AS(K) AS(M)  AS(COMMA) AS(DOT) AS(FSLH) &none
                      &none &kp BACKSPACE &kp LSHIFT   &kp RSHIFT &kp SPACE &kp RETURN
                        >;
                };
      lower_layer {
         label = "Lower";
         bindings = <
// -----------------------------------------------------------------------------------------
// |  --  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |  --  |
// |  --  | BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |  --  |
// |  --  |     |     |     |     |     |   |     |     |     |     |     |  --  |
//                    | GUI |     | SPC |   | ENT |     | ALT |
   &none  &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &none
   &none  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &none
   &none  &trans       &trans       &trans       &trans       &trans         &trans   &trans   &trans &trans    &trans &none
                          	        &kp LGUI     &trans       &kp SPACE      &kp RET  &trans   &kp RALT
                        >;
                };

                raise_layer {
                        label = "Raise";
                        bindings = <
// -----------------------------------------------------------------------------------------
// |  --  |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |  --  |
// |  --  |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  --  |
// |  --  |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  --  |
//                    | GUI |     | SPC |   | ENT |     | ALT |
   &none  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &none
   &none  &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &none
   &none  &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &none
                    	     &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                };
        };
};
